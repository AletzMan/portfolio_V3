---

---

<button id="themeToggle">
	<div class="buttonTheme">
		<div class="buttonTheme_button">
			<svg class="sun" width="14px" height="14px" viewBox="0 0 512 512">
				<path
					fill-rule="evenodd"
					d="M361.5 1.2c5 2.1 8.6 6.6 9.6 11.9L391 121l107.9 19.8c5.3 1 9.8 4.6 11.9 9.6s1.5 10.7-1.6 15.2L446.9 256l62.3 90.3c3.1 4.5 3.7 10.2 1.6 15.2s-6.6 8.6-11.9 9.6L391 391 371.1 498.9c-1 5.3-4.6 9.8-9.6 11.9s-10.7 1.5-15.2-1.6L256 446.9l-90.3 62.3c-4.5 3.1-10.2 3.7-15.2 1.6s-8.6-6.6-9.6-11.9L121 391 13.1 371.1c-5.3-1-9.8-4.6-11.9-9.6s-1.5-10.7 1.6-15.2L65.1 256 2.8 165.7c-3.1-4.5-3.7-10.2-1.6-15.2s6.6-8.6 11.9-9.6L121 121 140.9 13.1c1-5.3 4.6-9.8 9.6-11.9s10.7-1.5 15.2 1.6L256 65.1 346.3 2.8c4.5-3.1 10.2-3.7 15.2-1.6zM160 256a96 96 0 1 1 192 0 96 96 0 1 1 -192 0zm224 0a128 128 0 1 0 -256 0 128 128 0 1 0 256 0z"
				></path>
			</svg>
			<svg class="moon" width="14px" height="14px" viewBox="0 0 512 512">
				<path
					fill-rule="evenodd"
					d="M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z"
				></path>
			</svg>
		</div>
	</div>
</button>

<style>
	#themeToggle {
		border: 0;
		background: none;
		cursor: pointer;
		border: 1px solid var(--borderColor);
		border-radius: 3em;

		&:hover .buttonTheme .buttonTheme_button {
			transform: scale(1.3);
		}
	}
	.sun {
		position: absolute;
		transform: translateX(22px);
		fill: var(--backgroundColor);
		transition: all 0.2s ease-in-out;
	}
	.moon {
		fill: transparent;
		transform: translateX(-18px);
	}

	:global(.dark) .sun {
		fill: transparent;
	}
	:global(.dark) .moon {
		fill: white;
	}
	.buttonTheme {
		position: relative;
		width: 46px;
		height: 24px;
		background-color: var(--primaryColor);
		border-radius: 1em;
		overflow: hidden;
		/*border: 2px solid var(--textColor);*/

		& .buttonTheme_button {
			position: relative;
			display: flex;
			align-items: center;
			justify-content: center;
			width: 18px;
			height: 18px;
			border-radius: 50%;
			transform: scale(1);
			background-color: var(--textColor);
			/*border: 1px solid var(--textColor);*/
			/*/transform: translateY(-1px) translateX(0px);*/
			transition: all 0.2s ease-in-out;
		}
	}
</style>
<script is:inline>
	const button = document.querySelector(".buttonTheme_button")
	const backButton = document.querySelector(".buttonTheme")
	const theme = (() => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme")
		}
		if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
			return "dark"
		}
		return "light"
	})()

	if (theme === "light") {
		document.documentElement.classList.remove("dark")
		button.style.transform = "translateY(3px) translateX(3px)"
		backButton.style.backgroundColor = "#ebcf50"
	} else {
		document.documentElement.classList.add("dark")
		button.style.transform = "translateY(3px) translateX(24px)"
		backButton.style.backgroundColor = "var(--backgroundColor)"
	}

	window.localStorage.setItem("theme", theme)

	const handleToggleClick = () => {
		const element = document.documentElement
		element.classList.toggle("dark")

		const isDark = element.classList.contains("dark")
		localStorage.setItem("theme", isDark ? "dark" : "light")
		if (isDark) {
			button.style.transform = "translateY(3px) translateX(24px)"
			backButton.style.backgroundColor = "var(--backgroundColor)"
		} else {
			button.style.transform = "translateY(3px) translateX(3px)"
			backButton.style.backgroundColor = "var(--secondaryColor)"
		}
	}

	document.getElementById("themeToggle").addEventListener("click", handleToggleClick)
</script>
