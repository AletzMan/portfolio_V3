---
import Layout from "../layouts/Layout.astro"
import Header from "../components/Header.astro"
import Home from "../components/Home/Home.astro"
import Experience from "../components/Experience/Experience.astro"
import Works from "../components/Works/Works.astro"
import Projects from "../components/Projects/Projects.astro"
import Contact from "../components/Contact/Contact.astro"
import { isOpenViewWork } from "../store/store"

import { getI18n } from "../i18n/index"
import { type Ii18n } from "../Types/i18n"
import ArrowLeftIcon from "./svg/ArrowLeftIcon.astro"
const { currentLocale } = Astro
const i18n = getI18n({ currentLocale })
const translations: Ii18n = i18n as Ii18n
---

<Layout title="Portfolio Alejandro Garcia" description={i18n.SEO_Description}>
	<main>
		<Header />
		<Home />
		<Works />
		<Projects />
		<Experience />
		<Contact />
		<dialog id="workView" class="workView" open>
			<button class="arrowLeft arrow">
				<ArrowLeftIcon />
			</button>
			<div class="numberImages">1 / 10</div>
			<button id="closeView" class="closeView">{translations.worksSection.buttonClose}</button
			>
			<picture class="pictureView">
				<img id="imageWork" class="imageWork" src="" />
			</picture>
			<button class="arrowRight arrow">
				<ArrowLeftIcon />
			</button>
		</dialog>
	</main>
</Layout>

<style>
	main {
		position: relative;
		margin: auto;
		width: 100svw;
		padding: 0 1em;
		max-width: var(--maxWidth);
		font-size: 20px;
		line-height: 1.6;
		color: currentColor;
		z-index: 3;
	}

	.workView {
		position: fixed;
		top: 0;
		display: grid;
		grid-template-columns: 1.5em 1fr 1.5em;
		grid-template-rows: 1.5em 1fr;
		place-items: center center;
		gap: 0.25em;
		width: 100svw;
		height: 100svh;
		z-index: 5;
		background-color: transparent;
		backdrop-filter: blur(10px);
	}

	.numberImages {
		grid-column: 2 / 3;
		margin: 3em 0 0 0;
		padding: 0.25em 0.75em;
		border: 1px solid var(--tabColorLight);
		color: var(--primaryColor);
		border-radius: 0.25em;
		font-weight: 600;
		background-color: var(--backgroundColor);
	}

	.closeView {
		justify-self: end;
		grid-column: 3 / 4;
		padding: 0.25em 0.5em;
		margin: 0 1em 0 0;
		background-color: brown;
		border: none;
		border-radius: 0.2em;
		color: var(--primaryColor);
		transition: all 0.25s ease-in-out;
		cursor: pointer;

		&:hover {
			background-color: red;
		}
	}

	.arrow {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 1.5em;
		height: 3em;
		color: white;
		border: none;
		border-radius: 0.25em;
		background-color: #829f0c;
		cursor: pointer;
		transition: all 0.25s ease-in-out;

		&:hover {
			background-color: var(--secondaryColor);
		}

		& > svg {
			width: 1.25em;
			height: 1.25em;
			stroke-width: 2px;
		}
	}

	.arrowLeft {
		grid-row: 2 / 3;
		grid-column: 1 / 2;
		justify-self: end;
	}

	.arrowRight {
		transform: rotate(180deg);
		grid-row: 2 / 3;
		grid-column: 3 / 4;
		justify-self: start;
	}

	.pictureView {
		display: flex;
		align-items: center;
		justify-content: center;
		overflow: hidden;
		grid-column: 2 / 3;
		grid-row: 2 / 3;
		padding: 0.5em;
		width: 100%;
		height: 100%;
		/*background-color: red;*/
		overflow: hidden;
	}

	.imageWork {
		object-fit: cover;
		padding: 0.5em;
		max-width: calc(100svw - 2em);
		border: 2px solid rgb(239, 239, 239);
		background: linear-gradient(#0ebbdd, #29f29c);
		box-shadow:
			3px 2px 13px 1px #10111575,
			-7px -7px 15px #2e303a00;
		border-radius: 0.25em;
		box-shadow:;
	}
</style>

<script>
	import type { Ii18n } from "../Types/i18n"
	import { getI18n } from "../i18n"
	import { isOpenViewWork } from "../store/store"

	const { currentLocale } = Astro
	const i18n = getI18n({ currentLocale })
	const translations: Ii18n = i18n as Ii18n
	const imageWork = document.getElementById("imageWork")
	const arrowLeft = document.querySelector(".arrowLeft")
	const arrowRight = document.querySelector(".arrowRight")
	const numberImages = document.querySelector(".numberImages")
	let numberImage = 0

	document.getElementById("closeView")!.addEventListener("click", () => {
		isOpenViewWork.set({ active: false, value: 0 })
	})

	arrowLeft!.addEventListener("click", () => {
		numberImage--
		imageWork?.setAttribute(
			"src",
			translations.worksSection.works[isOpenViewWork.get().value].slides[numberImage],
		)
		arrowRight?.setAttribute("style", "display: block")
		numberImages!.textContent = `${numberImage + 1} / ${translations.worksSection.works[isOpenViewWork.get().value].slides.length}`
		if (numberImage < 1) {
			arrowLeft?.setAttribute("style", "display: none")
		} else {
			arrowLeft?.setAttribute("style", "display: block")
		}
	})

	arrowRight!.addEventListener("click", () => {
		numberImage++
		imageWork?.setAttribute(
			"src",
			translations.worksSection.works[isOpenViewWork.get().value].slides[numberImage],
		)
		arrowLeft?.setAttribute("style", "display: block")
		numberImages!.textContent = `${numberImage + 1} / ${translations.worksSection.works[isOpenViewWork.get().value].slides.length}`
		if (
			numberImage ==
			translations.worksSection.works[isOpenViewWork.get().value].slides.length - 1
		) {
			arrowRight?.setAttribute("style", "display: none")
		} else {
			arrowRight?.setAttribute("style", "display: block")
		}
	})

	isOpenViewWork.subscribe((open) => {
		if (open.active) {
			document.getElementById("workView")!.style.display = "grid"
			imageWork?.setAttribute(
				"src",
				translations.worksSection.works[isOpenViewWork.get().value].slides[0],
			)
			numberImages!.textContent = `${numberImage + 1} / ${translations.worksSection.works[isOpenViewWork.get().value].slides.length}`
			document.body.style.overflowY = "hidden"
			if (
				numberImage + 1 ===
				translations.worksSection.works[isOpenViewWork.get().value].slides.length
			) {
				arrowRight?.setAttribute("style", "display: none")
			} else {
				arrowRight?.setAttribute("style", "display: block")
			}
		} else {
			document.getElementById("workView")!.style.display = "none"
			numberImage = 0
			arrowLeft?.setAttribute("style", "display: none")
			document.body.style.overflowY = "auto"
		}
	})
</script>
